"use client"

import type React from "react"

import { useEffect, useState } from "react"
import { useRouter } from "next/navigation"
import { Globe, ArrowUp, Copy, Download, LogOut, MessageSquare } from "lucide-react"
import { motion, useReducedMotion } from "framer-motion"
import { Bodoni_Moda } from "next/font/google"
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
  DialogFooter,
} from "@/components/ui/dialog"
import { Button } from "@/components/ui/button"
import { Label } from "@/components/ui/label"
import { Switch } from "@/components/ui/switch"
import { type auth, onAuth, logout } from "@/lib/firebase"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuItem } from "@/components/ui/dropdown-menu"
import { Avatar, AvatarFallback } from "@/components/ui/avatar"
import { Client, Databases } from "appwrite"
import { Progress } from "@/components/ui/progress"

// Déclarez Prettier au niveau global pour TypeScript
declare const prettier: any;
declare const prettierPlugins: any;

const bodoni = Bodoni_Moda({ subsets: ["latin"], display: "swap" })

type AnimationFile = {
  url: string
  content: string
  type: "css" | "js"
  isAnimation: boolean
  library?: string
  confidence: number
}

type Result = {
  title: string
  description: string
  techGuesses: string[]
  internalLinks: number
  externalLinks: number
  images: string[]
  stylesheets: number
  openGraphTags: number
  fullHTML: string
  fullCSS: string
  fullJS: string
  baseURL: string
  animationFiles: AnimationFile[]
  requiredCdnUrls: string[]
}

type ReducedResult = Omit<Result, "animationFiles" | "images">

// ... (Les composants CircularText, LogoMarquee, etc. restent les mêmes)

function CircularText({ size = 140 }: { size?: number }) {
  const prefersReduced = useReducedMotion()
  const radius = size / 2 - 8
  const text = " STUDIO • STUDIO • STUDIO • STUDIO • STUDIO • STUDIO • STUDIO • STUDIO • STUDIO • STUDIO •"
  return (
    <div className="mx-auto mb-6 flex items-center justify-center">
      <motion.svg
        width={size}
        height={size}
        viewBox={`0 0 ${size} ${size}`}
        className="text-black"
        aria-hidden="true"
        animate={prefersReduced ? undefined : { rotate: 360 }}
        transition={prefersReduced ? undefined : { repeat: Number.POSITIVE_INFINITY, duration: 14, ease: "linear" }}
        style={{ willChange: "transform" }}
      >
        <defs>
          <path
            id="circlePath"
            d={`M ${size / 2},${size / 2} m -${radius},0 a ${radius},${radius} 0 1,1 ${radius * 2},0 a ${radius},${radius} 0 1,1 -${radius * 2},0`}
          />
        </defs>
        <text fill="currentColor" fontSize="12" letterSpacing="2" className={`${bodoni.className} tracking-widest`}>
          <textPath href="#circlePath">{text}</textPath>
        </text>
      </motion.svg>
    </div>
  )
}

function LogoMarquee() {
  const prefersReduced = useReducedMotion()
  const logos = ["/images/logos/windsurf-text.svg", "/images/logos/v0.svg", "/images/logos/trae-text.svg", "/images/logos/replit-text.svg", "/images/logos/cursor-text.svg"]
  const repeated = [...logos, ...logos, ...logos]
  return (
    <div className="relative my-10">
      <div className="pointer-events-none absolute inset-y-0 left-0 w-16 bg-gradient-to-r from-white to-transparent" />
      <div className="pointer-events-none absolute inset-y-0 right-0 w-16 bg-gradient-to-l from-white to-transparent" />
      <div className="overflow-hidden">
        <motion.div className="flex gap-10 items-center" animate={prefersReduced ? undefined : { x: ["0%", "-50%"] }} transition={prefersReduced ? undefined : { duration: 30, repeat: Number.POSITIVE_INFINITY, ease: "linear" }}>
          {[...repeated, ...repeated].map((src, idx) => ( <img key={`${src}-${idx}`} src={src || "/placeholder.svg"} alt="logo" className="h-6 sm:h-8 object-contain" /> ))}
        </motion.div>
      </div>
    </div>
  )
}

type FrameworkKey = "next" | "remix" | "astro" | "vite-react" | "sveltekit" | "vue-vite" | "nuxt" | "html"

const frameworkLabel: Record<FrameworkKey, string> = {
  next: "Next.js (App Router, TSX)",
  remix: "Remix (TSX)",
  astro: "Astro (.astro)",
  "vite-react": "Vite (React, JSX)",
  sveltekit: "SvelteKit (+page.svelte)",
  "vue-vite": "Vue (Vite, SFC)",
  nuxt: "Nuxt (pages/preview.vue)",
  html: "HTML + CSS + JS (combined)",
}

const firebaseConfig = {
    apiKey: "AIzaSyDj0G6ztVSPdX2IBxSm_OTn49uOwYGoQ60",
    authDomain: "gloopin-374f1.firebaseapp.com",
    projectId: "gloopin-374f1",
    storageBucket: "gloopin-374f1.firebasestorage.app",
    messagingSenderId: "717792072207",
    appId: "1:717792072207:web:a5369e110ab3daad94497a",
    measurementId: "G-K5GHCYGF3E",
}

export default function SiteInspector() {
  const router = useRouter()
  const [isAuthReady, setIsAuthReady] = useState(false)
  const [user, setUser] = useState<ReturnType<(typeof auth)["currentUser"]> | null>(null)
  const [subscription, setSubscription] = useState<any>(null)
  
  // NOUVEL ÉTAT POUR LE FORMATEUR DE CODE
  const [isFormatterReady, setIsFormatterReady] = useState(false)
  
  const [url, setUrl] = useState("")
  const [result, setResult] = useState<Result | null>(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState<string | null>(null)
  const [copyStatus, setCopyStatus] = useState<{ id: string; message: string } | null>(null)
  const [isReducerActive, setIsReducerActive] = useState(false)
  const [reducedResult, setReducedResult] = useState<ReducedResult | null>(null)
  const [showReducedPreviewFrame, setShowReducedPreviewFrame] = useState(false)
  const [showExportModal, setShowExportModal] = useState(false)
  const [selectedFramework, setSelectedFramework] = useState<FrameworkKey>("next")
  const [generatedFilename, setGeneratedFilename] = useState<string>("")
  const [generatedCode, setGeneratedCode] = useState<string>("")
  const [showCodePreview, setShowCodePreview] = useState<boolean>(false)

  // CHARGEMENT DE PRETTIER AU DÉMARRAGE
  useEffect(() => {
    const scriptUrls = [
      "https://unpkg.com/prettier@2.8.8/standalone.js",
      "https://unpkg.com/prettier@2.8.8/parser-html.js",
      "https://unpkg.com/prettier@2.8.8/parser-postcss.js",
      "https://unpkg.com/prettier@2.8.8/parser-babel.js",
    ]
    let loadedScripts = 0
    
    const checkAllLoaded = () => {
      loadedScripts++;
      if (loadedScripts === scriptUrls.length) {
        console.log("Prettier formatter is ready.");
        setIsFormatterReady(true);
      }
    };
    
    scriptUrls.forEach(url => {
      const script = document.createElement("script");
      script.src = url;
      script.onload = checkAllLoaded;
      document.head.appendChild(script);
    });
  }, [])

  useEffect(() => {
    const unsub = onAuth(async (u) => {
      setUser(u)
      setIsAuthReady(true)
      if (u) {
        // loadSubscription(u.uid)
      } else {
        setSubscription(null)
      }
    })
    return () => unsub()
  }, [])

  // NOUVELLE FONCTION ASYNCHRONE POUR FORMATER LE CODE
  const formatCode = async (code: string, parser: "html" | "css" | "babel"): Promise<string> => {
    if (!isFormatterReady || typeof prettier === 'undefined' || typeof prettierPlugins === 'undefined') {
      console.warn("Formatter not ready, returning raw code.");
      return code;
    }
    try {
      return await prettier.format(code, {
        parser: parser,
        plugins: prettierPlugins,
        htmlWhitespaceSensitivity: 'ignore',
      });
    } catch (e) {
      console.error(`Failed to format ${parser} code:`, e);
      return code; // Retourne le code original en cas d'erreur de formatage
    }
  };

  const createDownloadLink = (content: string, filename: string, mimeType: string) => {
    const blob = new Blob([content], { type: mimeType })
    const url = URL.createObjectURL(blob)
    const a = document.createElement("a")
    a.href = url
    a.download = filename
    document.body.appendChild(a)
    a.click()
    document.body.removeChild(a)
    URL.revokeObjectURL(url)
  }

  const copyToClipboard = async (text: string, id: string) => {
    try {
      await navigator.clipboard.writeText(text)
      setCopyStatus({ id, message: "Copié ! ✅" })
      setTimeout(() => setCopyStatus(null), 2000)
    } catch {
      setCopyStatus({ id, message: "Échec de la copie ⌐" })
      setTimeout(() => setCopyStatus(null), 2000)
    }
  }

  const fetchWithRetry = async (
    url: string,
    maxAttempts = 5,
    delay = 1000,
  ): Promise<{ success: boolean; content: string; error?: string }> => {
    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
      try {
        const proxyUrl = `https://api.allorigins.win/get?url=${encodeURIComponent(url)}`
        const response = await fetch(proxyUrl)
        if (!response.ok) throw new Error(`Network response was not ok (status: ${response.status})`)
        const data = await response.json()
        if (!data.contents) throw new Error(`No content received from proxy`)
        return { success: true, content: data.contents }
      } catch (error) {
        if (attempt < maxAttempts) await new Promise((resolve) => setTimeout(resolve, delay));
        else return { success: false, content: "", error: String(error) }
      }
    }
    return { success: false, content: "", error: "Max attempts reached" }
  }

  const detectAnimationLibrary = (url: string, content: string): { isAnimation: boolean; library?: string; confidence: number } => {
    const urlLower = url.toLowerCase()
    const contentLower = content.toLowerCase()
    const libraries = [
        { name: "GSAP", patterns: [{ pattern: /gsap|tweenmax|tweenlite/gi, weight: 90 }] },
        { name: "Three.js", patterns: [{ pattern: /new THREE\.|THREE\.Scene/gi, weight: 95 }] },
        { name: "Lottie", patterns: [{ pattern: /lottie\.loadAnimation|bodymovin/gi, weight: 95 }] },
        { name: "AOS", patterns: [{ pattern: /AOS\.init|data-aos/gi, weight: 95 }] },
    ]
    let bestMatch = { library: "", confidence: 0 }
    for (const lib of libraries) {
        let score = 0
        for (const { pattern } of lib.patterns) {
            const matches = contentLower.match(pattern)
            if (matches) score += matches.length * 10
        }
        if (score > bestMatch.confidence) bestMatch = { library: lib.name, confidence: Math.min(100, score) }
    }
    return { isAnimation: bestMatch.confidence > 50, library: bestMatch.library || undefined, confidence: bestMatch.confidence }
  }

  const analyzeSite = async (urlToAnalyze = url) => {
    if (!urlToAnalyze) return
    setLoading(true)
    setError(null)
    setResult(null)
    setReducedResult(null)
    setShowReducedPreviewFrame(false)

    try {
      let fullUrl = urlToAnalyze;
      if (!/^https?:\/\//i.test(fullUrl)) fullUrl = "https://" + fullUrl;
      const response = await fetch(`https://api.allorigins.win/get?url=${encodeURIComponent(fullUrl)}`);
      if (!response.ok) throw new Error(`Network error: ${response.status}`);
      const data = await response.json();
      const html = data.contents;
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, "text/html");
      const baseURL = new URL(fullUrl).origin;

      const title = doc.querySelector("title")?.textContent || "No title";

      const animationFiles: AnimationFile[] = [];
      
      // CSS Extraction
      const cssSources = Array.from(doc.querySelectorAll('link[rel="stylesheet"]')).map(el => new URL(el.getAttribute("href")!, baseURL).href);
      const cssContents = await Promise.all(cssSources.map(href => fetchWithRetry(href)));
      const inlineCss = Array.from(doc.querySelectorAll("style")).map(s => s.textContent || "");
      const rawFullCSS = [...cssContents.filter(c => c.success).map(c => c.content), ...inlineCss].join("\n\n");
      
      // JS Extraction
      const scriptSources = Array.from(doc.querySelectorAll("script[src]")).map(el => new URL(el.getAttribute("src")!, baseURL).href);
      const scriptContents = await Promise.all(scriptSources.map(src => fetchWithRetry(src)));
      const inlineJs = Array.from(doc.querySelectorAll("script:not([src])")).map(s => s.textContent || "");
      const rawFullJS = [...scriptContents.filter(s => s.success).map(s => s.content), ...inlineJs].join("\n\n");
      
      // HTML Extraction
      const rawFullHTML = doc.body.innerHTML;
      
      // FORMATTING STEP
      const fullHTML = await formatCode(rawFullHTML, 'html');
      const fullCSS = await formatCode(rawFullCSS, 'css');
      const fullJS = await formatCode(rawFullJS, 'babel');

      // (La détection d'animation peut être simplifiée ou améliorée ici si besoin)
      scriptContents.forEach((script, i) => {
        if(script.success) {
            const animInfo = detectAnimationLibrary(scriptSources[i], script.content);
            if (animInfo.isAnimation) animationFiles.push({ url: scriptSources[i], content: script.content, type: 'js', ...animInfo });
        }
      });

      setResult({
          title, description: "", techGuesses: [], internalLinks: 0, externalLinks: 0,
          images: [], stylesheets: cssSources.length, openGraphTags: 0,
          fullHTML, fullCSS, fullJS,
          baseURL, animationFiles, requiredCdnUrls: []
      });

    } catch (err) {
      setError(`Analysis failed: ${err instanceof Error ? err.message : "Unknown error"}`)
    } finally {
      setLoading(false)
    }
  }

  const handleAnalyzeClick = () => analyzeSite()
  const handleProposalClick = (proposalUrl: string) => {
    setUrl(proposalUrl)
    analyzeSite(proposalUrl)
  }

  // MISE À JOUR DE LA LOGIQUE DE RÉDUCTION POUR UTILISER LE FORMATEUR
  useEffect(() => {
    if (!result) return;
    const reduceCode = async () => {
      const rawAnimationJs = result.animationFiles
        .filter((file) => file.type === "js")
        .map((file) => `/* Animation script from: ${file.url} */\n${file.content}`)
        .join("\n\n");
        
      const { reducedHtml: rawReducedHtml, reducedCss: rawReducedCss } = reduceHtmlAndCss(result.fullHTML, result.fullCSS);

      // FORMATTING STEP FOR REDUCED CODE
      const animationJs = await formatCode(rawAnimationJs, 'babel');
      const reducedHtml = await formatCode(rawReducedHtml, 'html');
      const reducedCss = await formatCode(rawReducedCss, 'css');

      setReducedResult({ ...result, fullHTML: reducedHtml, fullCSS: reducedCss, fullJS: animationJs });
    };
    reduceCode();
  }, [result]);

  const reduceHtmlAndCss = (html: string, css: string): { reducedHtml: string; reducedCss: string } => {
    const parser = new DOMParser()
    const doc = parser.parseFromString(html, "text/html")
    doc.querySelectorAll("svg").forEach((svg) => {
      const emojiSpan = doc.createElement("span")
      emojiSpan.textContent = "🎨"
      emojiSpan.setAttribute("role", "img")
      svg.parentNode?.replaceChild(emojiSpan, svg)
    })
    const reducedHtml = doc.body.innerHTML
    const usedClasses = new Set<string>()
    doc.querySelectorAll("[class]").forEach((el) => el.classList.forEach((cls) => usedClasses.add(cls)))
    const cssRules = css.split("}")
    const a_garder_css = cssRules.filter((rule) => {
      const selectorPart = rule.split("{")[0].trim()
      if (!selectorPart || /^(html|body|\*|:root)/i.test(selectorPart)) return false
      return Array.from(usedClasses).some((cls) => new RegExp(`\\.${CSS.escape(cls)}(\\s|:|,)`).test(selectorPart + " "))
    })
    const reducedCss = a_garder_css.join("}")
    return { reducedHtml, reducedCss }
  }
  
  const createOptimizedPreview = (res: Result | ReducedResult | null) => {
      if (!res) return "";
      const { fullHTML, fullCSS, fullJS, baseURL } = res;
      return `<!DOCTYPE html><html><head><base href="${baseURL}"><style>${fullCSS}</style></head><body>${fullHTML}<script>${fullJS}</script></body></html>`;
  }

  const HeaderAction = () => {
    if (!isAuthReady) return null;
    if (user) {
        const email = user.email || "user";
        const fallback = email.slice(0, 2).toUpperCase();
        return (
            <DropdownMenu>
                <DropdownMenuTrigger asChild>
                    <Button variant="outline" className="h-[32px] rounded-[13px] bg-transparent">
                        <Avatar className="h-6 w-6 mr-2"><AvatarFallback>{fallback}</AvatarFallback></Avatar>
                        {email}
                    </Button>
                </DropdownMenuTrigger>
                <DropdownMenuContent align="end">
                    <DropdownMenuItem onClick={async () => { await logout(); router.replace("/"); }}>
                        <LogOut className="h-4 w-4 mr-2" />
                        Sign out
                    </DropdownMenuItem>
                </DropdownMenuContent>
            </DropdownMenu>
        );
    }
    return <a href="/signup" className="h-[32px] px-5 text-sm flex items-center justify-center rounded-[13px] bg-black text-white font-semibold">Sign up</a>;
  }
  
  const proposalUrls = ["cosmos.so", "stripe.com", "linear.app"]
  const proposalUrlImages: Record<string, string> = {
    "cosmos.so":
      "https://fra.cloud.appwrite.io/v1/storage/buckets/68968fe8001266b9f411/files/68969cd6000b7adb25e0/view?project=68802a5d00297352e520&mode=admin",
    "stripe.com":
      "https://fra.cloud.appwrite.io/v1/storage/buckets/68968fe8001266b9f411/files/68969d45000bcf13ad68/view?project=68802a5d00297352e520&mode=admin",
    "linear.app":
      "https://fra.cloud.appwrite.io/v1/storage/buckets/68968fe8001266b9f411/files/68969d55000989225796/view?project=68802a5d00297352e520&mode=admin",
  }

  return (
    <div className="min-h-screen bg-white overflow-hidden p-4 sm:p-8">
      <header className="max-w-4xl mx-auto flex justify-between items-center mb-12">
        <svg className="h-[20px] w-[20px]" viewBox="0 0 32 32" xmlns="http://www.w3.org/2000/svg" fill="#111"><rect x="0" y="0" width="32" height="32" rx="10" /></svg>
        <HeaderAction />
      </header>

      <div className="max-w-4xl mx-auto p-6 sm:p-10 pb-60">
        <div className="text-center mb-10">
          <CircularText size={140} />
          <h1 className={`${bodoni.className} text-5xl sm:text-7xl md:text-8xl leading-[1.05] text-black mb-4`}>
            Clone your favorite website design.
          </h1>
          <p className="text-lg text-gray-600 max-w-xl mx-auto">
            Paste a URL, launch the process, and instantly get a pixel-perfect replica of any website&apos;s design.
          </p>
        </div>

        <div className="h-[45px] w-[90%] sm:w-[400px] ring-5 ring-[#eee] rounded-[12px] flex items-center p-1 mx-auto mb-4">
          <div className="h-full w-full bg-[#fff] ring-4 ring-[#FAFAFA] rounded-[12px] flex items-center p-1 ">
            <div className="p-2"><Globe size={20} className="text-black" /></div>
            <input type="text" placeholder="https://example.com" value={url} onChange={(e) => setUrl(e.target.value)} className="flex-grow h-full bg-transparent text-black focus:outline-none placeholder-[#888] text-sm" />
            <button onClick={handleAnalyzeClick} disabled={loading || !isFormatterReady} className="h-[35px] w-[35px] bg-[#111] rounded-[8px] flex items-center justify-center flex-shrink-0 disabled:opacity-50">
              {loading ? <div className="bg-white rounded-[6px] w-4 h-4 animate-pulse" /> : <ArrowUp size={20} className="text-white" />}
            </button>
          </div>
        </div>
        {!isFormatterReady && !loading && <p className="text-center text-xs text-gray-500">Initializing code formatter...</p>}

        {!loading && !result && (
          <>
            <div className="flex justify-center items-center gap-3 flex-wrap my-6">
              <span className="text-sm text-gray-500">Try:</span>
              {proposalUrls.map((pUrl) => (
                <button key={pUrl} onClick={() => handleProposalClick(pUrl)} className="h-[30px] bg-[#FAFAFA] rounded-[12px] flex items-center px-2 hover:scale-105" disabled={!isFormatterReady}>
                  <img src={proposalUrlImages[pUrl]} alt={`${pUrl} preview`} className="h-4 w-4 rounded-[4px] mr-2 object-cover" />
                  <p className="text-sm text-gray-700">{pUrl}</p>
                </button>
              ))}
            </div>
            <LogoMarquee />
          </>
        )}

        {error && <p className="text-red-600 bg-red-50 p-3 rounded-lg text-center mb-6">{error}</p>}

        {result && (
          <div className="space-y-12">
            <div>
              <h3 className="text-2xl font-bold text-black mb-4">Aperçu Complet</h3>
              <iframe title="UI preview" className="w-full h-96 border rounded-xl bg-white" srcDoc={createOptimizedPreview(result)} sandbox="allow-scripts allow-same-origin" />
            </div>
            {reducedResult && (
              <div>
                <h3 className="text-2xl font-bold text-black mb-4">Aperçu Réduit</h3>
                <iframe title="Aperçu Réduit" className="w-full h-96 border rounded-xl bg-white" srcDoc={createOptimizedPreview(reducedResult)} sandbox="allow-scripts allow-same-origin" />
              </div>
            )}
            {showReducedPreviewFrame && reducedResult && (
              <div>
                <h3 className="text-2xl font-bold text-green-600 mb-4">Test du code réduit</h3>
                <iframe title="Aperçu du Prompt Réduit Injecté" className="w-full h-96 border-2 border-green-400 rounded-xl bg-white" srcDoc={createOptimizedPreview(reducedResult)} sandbox="allow-scripts allow-same-origin" />
              </div>
            )}
          </div>
        )}
      </div>

      {result && (
        <div className="fixed bottom-0 left-0 right-0 p-4 flex flex-col items-center z-50 gap-3">
          <div className="flex items-center gap-3 bg-white/80 backdrop-blur-lg p-2 rounded-2xl shadow-lg border">
            <span className="text-sm font-medium pl-2">Fichiers Réduits :</span>
            <Button variant="outline" size="sm" onClick={() => { if (!reducedResult) return; createDownloadLink(reducedResult.fullHTML, 'index_reduced.html', 'text/html'); }} disabled={!reducedResult}>
                <Download className="w-4 h-4 mr-2" />HTML
            </Button>
            <Button variant="outline" size="sm" onClick={() => { if (!reducedResult) return; createDownloadLink(reducedResult.fullCSS, 'styles_reduced.css', 'text/css'); }} disabled={!reducedResult}>
                <Download className="w-4 h-4 mr-2" />CSS
            </Button>
            <Button variant="outline" size="sm" onClick={() => { if (!reducedResult) return; createDownloadLink(reducedResult.fullJS, 'script_reduced.js', 'application/javascript'); }} disabled={!reducedResult}>
                <Download className="w-4 h-4 mr-2" />JS
            </Button>
            <Button onClick={() => setShowReducedPreviewFrame(true)} size="sm" className="bg-purple-600 hover:bg-purple-700 text-white">
                <MessageSquare className="w-4 h-4 mr-2" />Tester le rendu
            </Button>
          </div>
        </div>
      )}
    </div>
  )
}